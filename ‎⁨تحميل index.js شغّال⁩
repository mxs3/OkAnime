defineModule({
  name: "TopCinema",
  version: "1.0.0",
  author: "Deresh Dev",
  language: "Arabic",
  async searchResults({ keyword }) {
    const tmdbUrl = `https://api.themoviedb.org/3/search/multi?api_key=653bb8af90162bd98fc7ee32bcbbfb3d&query=${encodeURIComponent(keyword)}&include_adult=false`;
    const response = await fetch(tmdbUrl);
    const data = await response.json();
    return data.results
      .filter(result => result.media_type === "movie" || result.media_type === "tv")
      .map(result => {
        const id = result.id;
        const title = result.title || result.name || "بدون عنوان";
        const image = result.poster_path ? `https://image.tmdb.org/t/p/w500${result.poster_path}` : "";
        const href = result.media_type === "movie"
          ? `https://web6.topcinema.cam/movie/${id}`
          : `https://web6.topcinema.cam/series/${id}`;
        return { title, image, href };
      });
  },

  async extractStream({ url }) {
    const res = await fetch(url);
    const html = await res.text();
    const iframeMatch = html.match(/<iframe[^>]+src="([^"]+)"[^>]*>/i);
    if (!iframeMatch) {
      return [];
    }
    const embedUrl = iframeMatch[1].startsWith("http") ? iframeMatch[1] : `https:${iframeMatch[1]}`;
    return [{ url: embedUrl, quality: "Auto", isM3U8: true }];
  },

  async extractDetails({ url }) {
    const res = await fetch(url);
    const html = await res.text();
    const titleMatch = html.match(/<title>(.*?)<\/title>/i);
    const descriptionMatch = html.match(/<meta name="description" content="([^"]+)"/i);
    return [{
      description: descriptionMatch ? descriptionMatch[1] : "لا يوجد وصف.",
      aliases: titleMatch ? titleMatch[1] : "بدون عنوان",
      airdate: ""
    }];
  },

  async extractEpisodes({ url }) {
    // Not implemented - TopCinema might not list episodes directly
    return [{ title: "مشاهدة", href: url, number: 1 }];
  }
});